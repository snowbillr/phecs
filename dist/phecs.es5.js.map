{"version":3,"file":"phecs.es5.js","sources":["../src/uuid-util.ts","../src/entity.ts","../src/entity-manager.ts","../src/systems-manager.ts","../src/phecs-registry.ts","../src/phecs-factory.ts","../src/phecs-plugin.ts","../src/phecs.ts"],"sourcesContent":["export function generateUuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    // tslint:disable-next-line:one-variable-per-declaration\n    const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}","import { generateUuid } from \"./uuid-util\";\n\nexport class Entity implements Entity {\n  public type: string;\n  public id: string;\n  public components: Component[];\n\n  constructor(type: string) {\n    this.type = type;\n    this.id = generateUuid();\n    this.components = [];\n  }\n\n  getComponent<T extends ComponentConstructor>(componentKlass: T): InstanceType<T> {\n    const foundComponent = this.components.find(component => {\n      return component instanceof componentKlass;\n    });\n\n    if (foundComponent) {\n      return foundComponent as InstanceType<T>;\n    }\n\n    throw new Error(`Entity::NO_COMPONENT_${typeof componentKlass}`);\n  }\n\n  hasComponent<T extends ComponentConstructor>(componentKlass: T): boolean {\n    return this.components.some(component => component instanceof componentKlass);\n  }\n}\n","import { Entity } from './entity';\n\ntype PrefabMap = { [key: string]: Prefab };\n\nexport class EntityManager {\n  private scene: Phaser.Scene;\n\n  private prefabs: PrefabMap;\n  private entities: Entity[];\n\n  constructor(scene: Phaser.Scene) {\n    this.scene = scene;\n    this.prefabs = {};\n\n    this.entities = [];\n  }\n\n  registerPrefab(key: string, prefab: Prefab) {\n    this.prefabs[key] = prefab;\n  }\n\n  createPrefab(type: string, properties: any, x: number = 0, y: number = 0) {\n    const entity = new Entity(type);\n    const prefab = this.prefabs[type];\n\n    const prefabProperties = {\n      x,\n      y,\n      ...properties\n    };\n\n    this.getComponentDefinitions(prefab.components).forEach((componentDefinition: PrefabComponentDefinition) => {\n      const component = new componentDefinition.component(this.scene, {\n        ...componentDefinition.data,\n        ...prefabProperties,\n      }, entity);\n\n      entity.components.push(component);\n    });\n\n    this.entities.push(entity);\n\n    return entity;\n  }\n\n  createEntity(components: PrefabComponentDefinition[], x: number, y: number) {\n    const entity = new Entity('custom');\n    const componentDefinitions = this.getComponentDefinitions(components);\n\n    componentDefinitions.forEach((componentDefinition: PrefabComponentDefinition) => {\n      const component = new componentDefinition.component(this.scene, {\n        ...componentDefinition.data,\n        x,\n        y,\n      }, entity);\n\n      entity.components.push(component);\n    });\n\n    this.entities.push(entity);\n\n    return entity;\n  }\n\n  // by id\n  // by component\n  // by prefab type\n  /*\n  query() {\n\n  }\n  */\n\n  getEntityById(id: string) {\n    return this.entities.find(entity => entity.id === id);\n  }\n\n  getEntities(identifier: EntityIdentifier) {\n    if (typeof identifier === 'string') {\n      return this.getEntitiesByType(identifier);\n    } else if (typeof identifier === 'function') {\n      return this.getEntitiesByComponent(identifier);\n    } else {\n      throw new Error(`Phecs.EntityManager::BAD_ENTITY_IDENTIFIER::${identifier}`);\n    }\n  }\n\n  destroy() {\n    this.entities.forEach(entity => {\n      entity.components.forEach(component => component.destroy());\n    });\n\n    this.entities = [];\n  }\n\n  private getComponentDefinitions(rawComponentList: (PrefabComponentDefinition | ComponentConstructor)[]): PrefabComponentDefinition[] {\n    return rawComponentList.map(componentDefinition => {\n      if (typeof componentDefinition === 'function') {\n        return {\n          component: componentDefinition,\n        };\n      }\n      else {\n        return componentDefinition;\n      }\n    });\n  }\n\n  private getEntitiesByComponent(component: ComponentConstructor) {\n    return this.entities.filter(entity => {\n      return entity.hasComponent(component);\n    });\n  }\n\n  private getEntitiesByType(type: string) {\n    return this.entities.filter(entity => entity.type === type);\n  }\n\n}\n","import Phaser from 'phaser';\nimport { EntityManager } from './entity-manager';\n\nexport class SystemsManager {\n  private scene: Phaser.Scene;\n\n  private systems: System[];\n\n  constructor(scene: Phaser.Scene) {\n    this.scene = scene as Phaser.Scene;\n\n    this.systems = [];\n  }\n\n  start(entityManager: EntityManager) {\n    this.systems.forEach(system => {\n      if (system.start) {\n        system.start(entityManager);\n      }\n    })\n  }\n\n  stop(entityManager: EntityManager) {\n    this.systems.forEach(system => {\n      if (system.stop) {\n        system.stop(entityManager);\n      }\n    })\n  }\n\n  update(entityManager: EntityManager) {\n    this.systems.forEach(system => {\n      if (system.update) {\n        system.update(entityManager);\n      }\n    });\n  }\n\n  destroy() {\n    this.systems.forEach(system => {\n      if (system.destroy) {\n        system.destroy();\n      }\n    });\n    \n    this.systems = [];\n  }\n\n  registerSystems(systemsList: SystemConstructor[]) {\n    systemsList.forEach((klass) => {\n      this.systems.push(new klass(this.scene));\n    });\n  }\n}\n","import { EntityManager } from './entity-manager';\nimport { SystemsManager } from './systems-manager';\n\nexport class PhecsRegistry {\n  constructor(\n    private phEntities: EntityManager,\n    private phSystems: SystemsManager\n  ) {}\n\n  system(systemClass: SystemConstructor) {\n    this.phSystems.registerSystems([systemClass]);\n  }\n\n  prefab(key: string, prefab: Prefab) {\n    this.phEntities.registerPrefab(key, prefab);\n  }\n}\n","import { EntityManager } from './entity-manager';\n\nexport class PhecsFactory {\n  constructor(\n    private phEntities: EntityManager,\n  ) {}\n\n  prefab(type: string, properties: Record<string, any>, x: number, y: number) {\n    return this.phEntities.createPrefab(type, properties, x, y);\n  }\n\n  entity(components: any[], x: number, y: number) {\n    return this.phEntities.createEntity(components, x, y);\n  }\n}\n","import Phaser from 'phaser';\n\nimport { EntityManager } from './entity-manager';\nimport { SystemsManager } from './systems-manager';\n\nimport { PhecsRegistry } from './phecs-registry';\nimport { PhecsFactory } from './phecs-factory';\n\nexport class PhecsPlugin extends Phaser.Plugins.ScenePlugin {\n  private phEntities: EntityManager;\n  private phSystems: SystemsManager;\n\n  public register: PhecsRegistry;\n  public add: PhecsFactory;\n\n  constructor(scene: Phaser.Scene, pluginManager: Phaser.Plugins.PluginManager) {\n    super(scene, pluginManager);\n\n    this.phEntities = new EntityManager(scene);\n    this.phSystems = new SystemsManager(scene);\n\n    this.register = new PhecsRegistry(this.phEntities, this.phSystems);\n    this.add = new PhecsFactory(this.phEntities);\n\n    this.scene.events.once(Phaser.Scenes.Events.CREATE, this.start, this);\n    this.scene.events.once(Phaser.Scenes.Events.SHUTDOWN, this.shutdown, this);\n  }\n\n  update() {\n    this.phSystems.update(this.phEntities);\n  }\n\n  start() {\n    this.phSystems.start(this.phEntities);\n    this.scene.events.on(Phaser.Scenes.Events.POST_UPDATE, this.update, this);\n  }\n\n  private shutdown() {\n    this.scene.events.off(Phaser.Scenes.Events.POST_UPDATE, this.update, this);\n\n    this.phSystems.stop(this.phEntities);\n\n    this.phEntities.destroy();\n    this.phSystems.destroy();\n  }\n}\n","// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)\n// import \"core-js/fn/array.find\"\n// ...\n\nexport * from './phecs-plugin';"],"names":[],"mappings":"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"}