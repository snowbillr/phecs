{"version":3,"file":"phecs.umd.js","sources":["../src/uuid-util.ts","../src/entity.ts","../src/entity-manager.ts","../src/systems-manager.ts","../src/phecs-registry.ts","../src/phecs-factory.ts","../src/phecs-plugin.ts","../src/phecs.ts"],"sourcesContent":["export function generateUuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    // tslint:disable-next-line:one-variable-per-declaration\n    const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}","import { generateUuid } from \"./uuid-util\";\n\nexport class Entity implements Entity {\n  public type: string;\n  public id: string;\n  public components: Component[];\n\n  constructor(type: string) {\n    this.type = type;\n    this.id = generateUuid();\n    this.components = [];\n  }\n\n  getComponent<T extends ComponentConstructor>(componentKlass: T): InstanceType<T> {\n    const foundComponent = this.components.find(component => {\n      return component instanceof componentKlass;\n    });\n\n    if (foundComponent) {\n      return foundComponent as InstanceType<T>;\n    }\n\n    throw new Error(`Entity::NO_COMPONENT_${typeof componentKlass}`);\n  }\n\n  hasComponent<T extends ComponentConstructor>(componentKlass: T): boolean {\n    return this.components.some(component => component instanceof componentKlass);\n  }\n}\n","import { Entity } from './entity';\n\ntype PrefabMap = { [key: string]: Prefab };\n\nexport class EntityManager {\n  private scene: Phaser.Scene;\n\n  private prefabs: PrefabMap;\n  private entities: Entity[];\n\n  constructor(scene: Phaser.Scene) {\n    this.scene = scene;\n    this.prefabs = {};\n\n    this.entities = [];\n  }\n\n  registerPrefab(key: string, prefab: Prefab) {\n    this.prefabs[key] = prefab;\n  }\n\n  createPrefab(type: string, properties: any, x: number = 0, y: number = 0) {\n    const entity = new Entity(type);\n    const prefab = this.prefabs[type];\n\n    const prefabProperties = {\n      x,\n      y,\n      ...properties\n    };\n\n    this.getComponentDefinitions(prefab.components).forEach((componentDefinition: PrefabComponentDefinition) => {\n      const component = new componentDefinition.component(this.scene, {\n        ...componentDefinition.data,\n        ...prefabProperties,\n      }, entity);\n\n      entity.components.push(component);\n    });\n\n    this.entities.push(entity);\n\n    return entity;\n  }\n\n  createEntity(components: PrefabComponentDefinition[], x: number, y: number) {\n    const entity = new Entity('custom');\n    const componentDefinitions = this.getComponentDefinitions(components);\n\n    componentDefinitions.forEach((componentDefinition: PrefabComponentDefinition) => {\n      const component = new componentDefinition.component(this.scene, {\n        ...componentDefinition.data,\n        x,\n        y,\n      }, entity);\n\n      entity.components.push(component);\n    });\n\n    this.entities.push(entity);\n\n    return entity;\n  }\n\n  // by id\n  // by component\n  // by prefab type\n  /*\n  query() {\n\n  }\n  */\n\n  getEntityById(id: string) {\n    return this.entities.find(entity => entity.id === id);\n  }\n\n  getEntities(identifier: EntityIdentifier) {\n    if (typeof identifier === 'string') {\n      return this.getEntitiesByType(identifier);\n    } else if (typeof identifier === 'function') {\n      return this.getEntitiesByComponent(identifier);\n    } else {\n      throw new Error(`Phecs.EntityManager::BAD_ENTITY_IDENTIFIER::${identifier}`);\n    }\n  }\n\n  destroy() {\n    this.entities.forEach(entity => {\n      entity.components.forEach(component => component.destroy());\n    });\n\n    this.entities = [];\n  }\n\n  private getComponentDefinitions(rawComponentList: (PrefabComponentDefinition | ComponentConstructor)[]): PrefabComponentDefinition[] {\n    return rawComponentList.map(componentDefinition => {\n      if (typeof componentDefinition === 'function') {\n        return {\n          component: componentDefinition,\n        };\n      }\n      else {\n        return componentDefinition;\n      }\n    });\n  }\n\n  private getEntitiesByComponent(component: ComponentConstructor) {\n    return this.entities.filter(entity => {\n      return entity.hasComponent(component);\n    });\n  }\n\n  private getEntitiesByType(type: string) {\n    return this.entities.filter(entity => entity.type === type);\n  }\n\n}\n","import Phaser from 'phaser';\nimport { EntityManager } from './entity-manager';\n\nexport class SystemsManager {\n  private scene: Phaser.Scene;\n\n  private systems: System[];\n\n  constructor(scene: Phaser.Scene) {\n    this.scene = scene as Phaser.Scene;\n\n    this.systems = [];\n  }\n\n  start(entityManager: EntityManager) {\n    this.systems.forEach(system => {\n      if (system.start) {\n        system.start(entityManager);\n      }\n    })\n  }\n\n  stop(entityManager: EntityManager) {\n    this.systems.forEach(system => {\n      if (system.stop) {\n        system.stop(entityManager);\n      }\n    })\n  }\n\n  update(entityManager: EntityManager) {\n    this.systems.forEach(system => {\n      if (system.update) {\n        system.update(entityManager);\n      }\n    });\n  }\n\n  destroy() {\n    this.systems.forEach(system => {\n      if (system.destroy) {\n        system.destroy();\n      }\n    });\n    \n    this.systems = [];\n  }\n\n  registerSystems(systemsList: SystemConstructor[]) {\n    systemsList.forEach((klass) => {\n      this.systems.push(new klass(this.scene));\n    });\n  }\n}\n","import { EntityManager } from './entity-manager';\nimport { SystemsManager } from './systems-manager';\n\nexport class PhecsRegistry {\n  constructor(\n    private phEntities: EntityManager,\n    private phSystems: SystemsManager\n  ) {}\n\n  system(systemClass: SystemConstructor) {\n    this.phSystems.registerSystems([systemClass]);\n  }\n\n  prefab(key: string, prefab: Prefab) {\n    this.phEntities.registerPrefab(key, prefab);\n  }\n}\n","import { EntityManager } from './entity-manager';\n\nexport class PhecsFactory {\n  constructor(\n    private phEntities: EntityManager,\n  ) {}\n\n  prefab(type: string, properties: Record<string, any>, x: number, y: number) {\n    return this.phEntities.createPrefab(type, properties, x, y);\n  }\n\n  entity(components: any[], x: number, y: number) {\n    return this.phEntities.createEntity(components, x, y);\n  }\n}\n","import Phaser from 'phaser';\n\nimport { EntityManager } from './entity-manager';\nimport { SystemsManager } from './systems-manager';\n\nimport { PhecsRegistry } from './phecs-registry';\nimport { PhecsFactory } from './phecs-factory';\n\nexport class PhecsPlugin extends Phaser.Plugins.ScenePlugin {\n  private phEntities: EntityManager;\n  private phSystems: SystemsManager;\n\n  public register: PhecsRegistry;\n  public add: PhecsFactory;\n\n  constructor(scene: Phaser.Scene, pluginManager: Phaser.Plugins.PluginManager) {\n    super(scene, pluginManager);\n\n    this.phEntities = new EntityManager(scene);\n    this.phSystems = new SystemsManager(scene);\n\n    this.register = new PhecsRegistry(this.phEntities, this.phSystems);\n    this.add = new PhecsFactory(this.phEntities);\n\n    this.scene.events.once(Phaser.Scenes.Events.CREATE, this.start, this);\n    this.scene.events.once(Phaser.Scenes.Events.SHUTDOWN, this.shutdown, this);\n  }\n\n  update() {\n    this.phSystems.update(this.phEntities);\n  }\n\n  start() {\n    this.phSystems.start(this.phEntities);\n    this.scene.events.on(Phaser.Scenes.Events.POST_UPDATE, this.update, this);\n  }\n\n  private shutdown() {\n    this.scene.events.off(Phaser.Scenes.Events.POST_UPDATE, this.update, this);\n\n    this.phSystems.stop(this.phEntities);\n\n    this.phEntities.destroy();\n    this.phSystems.destroy();\n  }\n}\n","// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)\n// import \"core-js/fn/array.find\"\n// ...\n\nexport * from './phecs-plugin';"],"names":[],"mappings":"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"}